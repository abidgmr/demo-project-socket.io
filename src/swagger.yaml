openapi: 3.0.0
info:
  title: GMR_SOCKET.IO_API DOCS
  version: 1.0.0

servers:
  - url: http://localhost:3001

tags:
  - name: Health
    description: Health check APIs
  - name: Account
    description: Account authentication APIs
  - name: Chat
    description: Chat-related APIs
  - name: User
    description: User-related APIs

# Global Security Requirement
security:
  - BearerAuth: []
  - ClientIdHeader: []

paths:

  # Account Controller

  /account/health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      responses:
        '200':
          description: Returns a greeting message

  /account/login:
    post:
      tags:
        - Account
      summary: Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
        '400':
          description: Login failed

  /account/register:
    post:
      tags:
        - Account
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
                name:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Registration failed

  # Chat Controller

  /chat/send:
    post:
      tags:
        - Chat
      summary: Send a message to a specific socket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                socketId:
                  type: string
                  example: "123456"
                message:
                  type: string
                  example: "Hello from Swagger!"
      responses:
        '201':
          description: Message sent to specific socket
          content:
            application/json:
              schema:
                type: boolean

  /chat/broadcast:
    post:
      tags:
        - Chat
      summary: Broadcast a message to all sockets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Broadcasting to all users!"
      responses:
        '201':
          description: Message broadcasted
          content:
            application/json:
              schema:
                type: boolean

  # User Controller

  /user:
    get:
      tags:
        - User
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '400':
          description: Failed to retrieve users

  /user/{id}:
    get:
      tags:
        - User
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /user/{id}:
    put:
      tags:
        - User
      summary: Update a user category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Category updated successfully
        '400':
          description: Update failed

components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    ClientIdHeader:
      type: apiKey
      in: header
      name: clientid
